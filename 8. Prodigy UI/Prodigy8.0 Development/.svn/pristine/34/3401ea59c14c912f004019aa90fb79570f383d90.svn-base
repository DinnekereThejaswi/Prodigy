import { AfterViewInit } from '@angular/core';
import '../dependencies/initExtDeps';
import * as ɵngcc0 from '@angular/core';
export declare class TelerikReportViewerComponent implements AfterViewInit {
    containerId: string;
    id: string;
    serviceUrl: string;
    reportServer: any;
    templateUrl: string;
    initialPageAreaImageUrl: string;
    reportSource: any;
    sendEmail: any;
    parameters: any;
    scale: number;
    scaleMode: string;
    viewMode: string;
    pageMode: string;
    persistSession: boolean;
    parameterEditors: Array<any>;
    authenticationToken: string;
    printMode: string;
    selector: string;
    disabledButtonClass: string;
    checkedButtonClass: string;
    enableAccessibility: boolean;
    searchMetadataOnDemand: boolean;
    parametersAreaVisible: boolean;
    documentMapVisible: boolean;
    ready: Function;
    error: Function;
    parametersAreaPosition: string;
    documentMapAreaPosition: string;
    exportBegin: Function;
    exportEnd: Function;
    sendEmailBegin: Function;
    sendEmailEnd: Function;
    pageReady: Function;
    printBegin: Function;
    printEnd: Function;
    renderingBegin: Function;
    renderingEnd: Function;
    updateUi: Function;
    interactiveActionExecuting: Function;
    interactiveActionEnter: Function;
    interactiveActionLeave: Function;
    viewerToolTipOpening: Function;
    commands: any;
    container: any;
    containerStyle: any;
    viewerObject: any;
    reportViewerID: string;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    refreshReport(): any;
    getReportSource(): any;
    setReportSource(rs: any): any;
    getViewMode(): string;
    setViewMode(vm: string): any;
    getScale(): any;
    setScale(scale: any): any;
    pageCount(): number;
    currentPage(): number;
    setAuthenticationToken(token: string): any;
    getAccessibilityKeyMap(): any;
    setAccessibilityKeyMap(keyMap: any): any;
    bind(eventName: string, eventHandler: Function): void;
    unbind(eventName: string, eventHandler: Function): void;
    unbindAll(eventName: string): void;
    getPageMode(): string;
    setPageMode(psm: string): any;
    clearReportSource(): any;
    static ngComponentDef: ɵngcc0.ɵɵComponentDefWithMeta<TelerikReportViewerComponent, "tr-viewer", never, { 'id': "id", 'serviceUrl': "serviceUrl", 'reportServer': "reportServer", 'templateUrl': "templateUrl", 'initialPageAreaImageUrl': "initialPageAreaImageUrl", 'reportSource': "reportSource", 'sendEmail': "sendEmail", 'parameters': "parameters", 'scale': "scale", 'scaleMode': "scaleMode", 'viewMode': "viewMode", 'pageMode': "pageMode", 'persistSession': "persistSession", 'parameterEditors': "parameterEditors", 'authenticationToken': "authenticationToken", 'printMode': "printMode", 'selector': "selector", 'disabledButtonClass': "disabledButtonClass", 'checkedButtonClass': "checkedButtonClass", 'enableAccessibility': "enableAccessibility", 'searchMetadataOnDemand': "searchMetadataOnDemand", 'parametersAreaVisible': "parametersAreaVisible", 'documentMapVisible': "documentMapVisible", 'ready': "ready", 'error': "error", 'parametersAreaPosition': "parametersAreaPosition", 'documentMapAreaPosition': "documentMapAreaPosition", 'exportBegin': "exportBegin", 'exportEnd': "exportEnd", 'sendEmailBegin': "sendEmailBegin", 'sendEmailEnd': "sendEmailEnd", 'pageReady': "pageReady", 'printBegin': "printBegin", 'printEnd': "printEnd", 'renderingBegin': "renderingBegin", 'renderingEnd': "renderingEnd", 'updateUi': "updateUi", 'interactiveActionExecuting': "interactiveActionExecuting", 'interactiveActionEnter': "interactiveActionEnter", 'interactiveActionLeave': "interactiveActionLeave", 'viewerToolTipOpening': "viewerToolTipOpening", 'containerStyle': "containerStyle" }, {}, never>;
}

//# sourceMappingURL=telerik-report-viewer.component.d.ts.map