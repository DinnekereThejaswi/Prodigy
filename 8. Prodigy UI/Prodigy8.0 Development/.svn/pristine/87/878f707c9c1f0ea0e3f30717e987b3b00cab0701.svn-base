import { Injectable, NgZone, Optional, NgModule, defineInjectable, inject } from '@angular/core';
import { from, fromEvent, interval, merge, of, Subject, timer } from 'rxjs';
import { bufferTime, distinctUntilChanged, filter, finalize, map, scan, switchMap, take, takeUntil, tap } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
class UserIdleConfig {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * User's idle service.
 */
class UserIdleService {
    /**
     * @param {?} config
     * @param {?} _ngZone
     */
    constructor(config, _ngZone) {
        this._ngZone = _ngZone;
        this.timerStart$ = new Subject();
        this.idleDetected$ = new Subject();
        this.timeout$ = new Subject();
        /**
         * Idle value in milliseconds.
         * Default equals to 10 minutes.
         */
        this.idleMillisec = 600 * 1000;
        /**
         * Idle buffer wait time milliseconds to collect user action
         * Default equals to 1 Sec.
         */
        this.idleSensitivityMillisec = 1000;
        /**
         * Timeout value in seconds.
         * Default equals to 5 minutes.
         */
        this.timeout = 300;
        /**
         * Ping value in milliseconds.
         * Default equals to 2 minutes.
         */
        this.pingMillisec = 120 * 1000;
        if (config) {
            this.setConfig(config);
        }
    }
    /**
     * Start watching for user idle and setup timer and ping.
     * @return {?}
     */
    startWatching() {
        if (!this.activityEvents$) {
            this.activityEvents$ = merge(fromEvent(window, 'mousemove'), fromEvent(window, 'resize'), fromEvent(document, 'keydown'));
        }
        this.idle$ = from(this.activityEvents$);
        if (this.idleSubscription) {
            this.idleSubscription.unsubscribe();
        }
        // If any of user events is not active for idle-seconds when start timer.
        this.idleSubscription = this.idle$
            .pipe(bufferTime(this.idleSensitivityMillisec), // Starting point of detecting of user's inactivity
        filter(arr => !arr.length && !this.isIdleDetected && !this.isInactivityTimer), tap(() => {
            this.isIdleDetected = true;
            this.idleDetected$.next(true);
        }), switchMap(() => this._ngZone.runOutsideAngular(() => interval(1000).pipe(takeUntil(merge(this.activityEvents$, timer(this.idleMillisec).pipe(tap(() => {
            this.isInactivityTimer = true;
            this.timerStart$.next(true);
        })))), finalize(() => {
            this.isIdleDetected = false;
            this.idleDetected$.next(false);
        })))))
            .subscribe();
        this.setupTimer(this.timeout);
        this.setupPing(this.pingMillisec);
    }
    /**
     * @return {?}
     */
    stopWatching() {
        this.stopTimer();
        if (this.idleSubscription) {
            this.idleSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    stopTimer() {
        this.isInactivityTimer = false;
        this.timerStart$.next(false);
    }
    /**
     * @return {?}
     */
    resetTimer() {
        this.stopTimer();
        this.isTimeout = false;
    }
    /**
     * Return observable for timer's countdown number that emits after idle.
     * @return {?}
     */
    onTimerStart() {
        return this.timerStart$.pipe(distinctUntilChanged(), switchMap(start => (start ? this.timer$ : of(null))));
    }
    /**
     * Return observable for idle status changed
     * @return {?}
     */
    onIdleStatusChanged() {
        return this.idleDetected$.asObservable();
    }
    /**
     * Return observable for timeout is fired.
     * @return {?}
     */
    onTimeout() {
        return this.timeout$.pipe(filter(timeout => !!timeout), tap(() => (this.isTimeout = true)), map(() => true));
    }
    /**
     * @return {?}
     */
    getConfigValue() {
        return {
            idle: this.idleMillisec,
            idleSensitivity: this.idleSensitivityMillisec,
            timeout: this.timeout,
            ping: this.pingMillisec
        };
    }
    /**
     * Set config values.
     * @param {?} config
     * @return {?}
     */
    setConfigValues(config) {
        if (this.idleSubscription && !this.idleSubscription.closed) {
            console.error('Call stopWatching() before set config values');
            return;
        }
        this.setConfig(config);
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    setConfig(config) {
        if (config.idle) {
            this.idleMillisec = config.idle * 1000;
        }
        if (config.ping) {
            this.pingMillisec = config.ping * 1000;
        }
        if (config.idleSensitivity) {
            this.idleSensitivityMillisec = config.idleSensitivity * 1000;
        }
        if (config.timeout) {
            this.timeout = config.timeout;
        }
    }
    /**
     * Set custom activity events
     *
     * @param {?} customEvents Example: merge(
     *   fromEvent(window, 'mousemove'),
     *   fromEvent(window, 'resize'),
     *   fromEvent(document, 'keydown'),
     *   fromEvent(document, 'touchstart'),
     *   fromEvent(document, 'touchend')
     * )
     * @return {?}
     */
    setCustomActivityEvents(customEvents) {
        if (this.idleSubscription && !this.idleSubscription.closed) {
            console.error('Call stopWatching() before set custom activity events');
            return;
        }
        this.activityEvents$ = customEvents;
    }
    /**
     * Setup timer.
     *
     * Counts every seconds and return n+1 and fire timeout for last count.
     * @protected
     * @param {?} timeout Timeout in seconds.
     * @return {?}
     */
    setupTimer(timeout) {
        this._ngZone.runOutsideAngular(() => {
            this.timer$ = interval(1000).pipe(take(timeout), map(() => 1), scan((acc, n) => acc + n), tap(count => {
                if (count === timeout) {
                    this.timeout$.next(true);
                }
            }));
        });
    }
    /**
     * Setup ping.
     *
     * Pings every ping-seconds only if is not timeout.
     * @protected
     * @param {?} pingMillisec
     * @return {?}
     */
    setupPing(pingMillisec) {
        this.ping$ = interval(pingMillisec).pipe(filter(() => !this.isTimeout));
    }
}
UserIdleService.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: UserIdleService, factory: function UserIdleService_Factory(t) { return new (t || UserIdleService)(ɵngcc0.ɵɵinject(UserIdleConfig, 8), ɵngcc0.ɵɵinject(NgZone)); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(UserIdleService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: UserIdleConfig, decorators: [{
                type: Optional
            }] }, { type: NgZone }]; }, { constructor: [], _ngZone: [], timerStart$: [], idleDetected$: [], timeout$: [], idleMillisec: [], idleSensitivityMillisec: [], timeout: [], pingMillisec: [], startWatching: [], activityEvents$: [], idle$: [], idleSubscription: [], isIdleDetected: [], isInactivityTimer: [], stopWatching: [], stopTimer: [], resetTimer: [], isTimeout: [], onTimerStart: [], onIdleStatusChanged: [], onTimeout: [], getConfigValue: [], setConfigValues: [], setConfig: [], setCustomActivityEvents: [], setupTimer: [], timer$: [], setupPing: [], ping$: [] });
/** @nocollapse */
UserIdleService.ctorParameters = () => [
    { type: UserIdleConfig, decorators: [{ type: Optional }] },
    { type: NgZone }
];
/** @nocollapse */ UserIdleService.ngInjectableDef = defineInjectable({ factory: function UserIdleService_Factory() { return new UserIdleService(inject(UserIdleConfig, 8), inject(NgZone)); }, token: UserIdleService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UserIdleModule {
    /**
     * @param {?} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: UserIdleModule,
            providers: [
                { provide: UserIdleConfig, useValue: config }
            ]
        };
    }
}
UserIdleModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: UserIdleModule });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(UserIdleModule, [{
        type: NgModule,
        args: [{
                imports: []
            }]
    }], null, null);
UserIdleModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function UserIdleModule_Factory(t) { return new (t || UserIdleModule)(); }, imports: [[]] });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { UserIdleService, UserIdleConfig, UserIdleModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,