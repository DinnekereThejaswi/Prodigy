/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from "@angular/core";
import { codes, modifiers } from "./keys";
import { fromEvent, timer, Subject, throwError } from "rxjs";
import { map, filter, tap, debounce, catchError } from "rxjs/operators";
import { allPass, any, difference, identity, isFunction, isNill } from "./utils";
const /** @type {?} */ $$ngOnDestroy = Symbol("OnDestroy");
export class KeyboardShortcutsService {
    constructor() {
        /**
         * Parsed shortcuts
         * for each key create a predicate function
         */
        this._shortcuts = [];
        /**
         * Throttle the keypress event.
         */
        this.throttleTime = 0;
        this._pressed = new Subject();
        /**
         * Streams of pressed events, can be used instead or with a command.
         */
        this.pressed$ = this._pressed.asObservable();
        /**
         * Disable all keyboard shortcuts
         */
        this.disabled = false;
        this._ignored = ["INPUT", "TEXTAREA", "SELECT"];
        this.isAllowed = (shortcut) => {
            const /** @type {?} */ target = /** @type {?} */ (shortcut.event.target);
            if (target === shortcut.target) {
                return true;
            }
            if (shortcut.allowIn.length) {
                return !difference(this._ignored, shortcut.allowIn).includes(target.nodeName);
            }
            return !this._ignored.includes(target.nodeName);
        };
        this.mapEvent = event => this._shortcuts
            .map(shortcut => Object.assign({}, shortcut, {
            predicates: any(identity, shortcut.predicates.map((predicates) => allPass(predicates)(event))),
            event: event
        }))
            .filter(shortcut => shortcut.predicates)
            .reduce((acc, shortcut) => (acc.priority > shortcut.priority ? acc : shortcut), /** @type {?} */ ({
            priority: 0
        }));
        this.keydown$ = fromEvent(document, "keydown").pipe(filter(_ => !this.disabled), map(this.mapEvent), filter((shortcut) => !shortcut.target || shortcut.event.target === shortcut.target), filter((shortcut) => isFunction(shortcut.command)), filter(this.isAllowed), tap(shortcut => !shortcut.preventDefault || shortcut.event.preventDefault()), debounce(shortcut => timer(shortcut.throttleTime)), tap(shortcut => shortcut.command({ event: shortcut.event, key: shortcut.key })), tap(shortcut => this._pressed.next({ event: shortcut.event, key: shortcut.key })), catchError(error => throwError(error)));
        /**
         * transforms a shortcut to:
         * a predicate function
         */
        this.getKeys = (command) => command
            .map(key => key.trim())
            .filter(key => key !== "+")
            .map(key => {
            // for modifiers like control key
            // look for event['ctrlKey']
            // otherwise use the keyCode
            if (modifiers.hasOwnProperty(key)) {
                return event => !!event[modifiers[key]];
            }
            return event => codes[key]
                ? event.keyCode === codes[key] || event.key === key
                : event.keyCode === key.toUpperCase().charCodeAt(0);
        });
        this.subscription = this.keydown$.subscribe();
    }
    /**
     * @return {?}
     */
    get shortcuts() {
        return this._shortcuts;
    }
    /**
     * Remove subscription.
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    /**
     * Enable all keyboard shortcuts
     * @return {?}
     */
    enable() {
        this.disabled = false;
        return this;
    }
    /**
     * Disable all keyboard shortcuts
     * @return {?}
     */
    disable() {
        this.disabled = true;
        return this;
    }
    /**
     * Check if all keyboard shortcuts are disabled.
     * @return {?}
     */
    isDisabled() {
        return this.disabled;
    }
    /**
     * Add new shortcut/s
     * @param {?} shortcuts
     * @param {?=} instance
     * @return {?}
     */
    add(shortcuts, instance) {
        shortcuts = Array.isArray(shortcuts) ? shortcuts : [shortcuts];
        if (instance) {
            const [key] = [...shortcuts.map(shortcut => shortcut.key)];
            this.bindOnDestroy(instance, key);
        }
        this._shortcuts.push(...this.parseCommand(shortcuts));
        return this;
    }
    /**
     * bind to the component ngOnDestroy to remove related keys
     * when component is destroyed.
     * @param {?} instance - component to remove keys when ngOnDestroy is called.
     * @param {?} keys
     * @return {?}
     */
    bindOnDestroy(instance, keys) {
        if (instance.ngOnDestroy) {
            instance[$$ngOnDestroy] = instance.ngOnDestroy;
        }
        const /** @type {?} */ that = this;
        instance.ngOnDestroy = function () {
            const /** @type {?} */ onDestroy = instance[$$ngOnDestroy];
            if (onDestroy) {
                onDestroy.apply(this);
            }
            that.remove(keys);
        };
        return this;
    }
    /**
     * Remove a command based on key or array of keys.
     * can be used for cleanup.
     * @param {?} key
     * @return {?}
     */
    remove(key) {
        const /** @type {?} */ keys = Array.isArray(key) ? key : [key];
        this._shortcuts = this._shortcuts.filter(shortcut => {
            return !shortcut.key.find(sKey => {
                return keys.filter(k => k === sKey).length > 0;
            });
        });
        return this;
    }
    /**
     * Returns an observable of keyboard shortcut filtered by a specific key.
     * @param {?} key - the key to filter the observable by.
     * @return {?}
     */
    select(key) {
        return this.pressed$.pipe(filter(({ event, key: eventKeys }) => {
            return !!eventKeys.find(eventKey => eventKey === key);
        }));
    }
    /**
     * Parse each command using getKeys function
     * @param {?} command
     * @return {?}
     */
    parseCommand(command) {
        const /** @type {?} */ commands = Array.isArray(command) ? command : [command];
        return commands.map(command => {
            const /** @type {?} */ keys = Array.isArray(command.key) ? command.key : [command.key];
            const /** @type {?} */ priority = Math.max(...keys.map(key => key.split(" ").length));
            const /** @type {?} */ predicates = keys.map(key => this.getKeys(key.split(" ")));
            return /** @type {?} */ (Object.assign({}, command, { allowIn: command.allowIn || [], key: keys, throttle: isNill(command.throttleTime) ? this.throttleTime : command.throttleTime, priority: priority, predicates: predicates }));
        });
    }
}
KeyboardShortcutsService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
KeyboardShortcutsService.ctorParameters = () => [];
function KeyboardShortcutsService_tsickle_Closure_declarations() {
    /**
     * Parsed shortcuts
     * for each key create a predicate function
     * @type {?}
     */
    KeyboardShortcutsService.prototype._shortcuts;
    /**
     * Throttle the keypress event.
     * @type {?}
     */
    KeyboardShortcutsService.prototype.throttleTime;
    /** @type {?} */
    KeyboardShortcutsService.prototype._pressed;
    /**
     * Streams of pressed events, can be used instead or with a command.
     * @type {?}
     */
    KeyboardShortcutsService.prototype.pressed$;
    /**
     * Disable all keyboard shortcuts
     * @type {?}
     */
    KeyboardShortcutsService.prototype.disabled;
    /** @type {?} */
    KeyboardShortcutsService.prototype._ignored;
    /**
     * Subscription for on destroy.
     * @type {?}
     */
    KeyboardShortcutsService.prototype.subscription;
    /** @type {?} */
    KeyboardShortcutsService.prototype.isAllowed;
    /** @type {?} */
    KeyboardShortcutsService.prototype.mapEvent;
    /** @type {?} */
    KeyboardShortcutsService.prototype.keydown$;
    /**
     * transforms a shortcut to:
     * a predicate function
     * @type {?}
     */
    KeyboardShortcutsService.prototype.getKeys;
}

//# sourceMappingURL=data:application/json;base64,