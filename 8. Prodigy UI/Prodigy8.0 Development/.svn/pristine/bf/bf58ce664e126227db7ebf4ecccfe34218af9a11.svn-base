{"version":3,"sources":["E:/MagnaWeb-Angular8.0/node_modules/ngx-barcode6/fesm2015/ngx-barcode6.js"],"names":[],"mappings":"AAAA;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyEC,aAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8BD,uKAOC","file":"ngx-barcode6.js","sourcesContent":["import { Component, Renderer2, Input, ViewChild, NgModule } from '@angular/core';\n\n// tslint:disable:no-input-rename component-selector\nconst jsbarcode = require('jsbarcode');\nclass NgxBarcode6Component {\n    constructor(renderer) {\n        this.renderer = renderer;\n        this.elementType = 'svg';\n        this.cssClass = 'barcode'; // this should be done more elegantly\n        this.format = 'CODE128';\n        this.lineColor = '#000000';\n        this.width = 2;\n        this.height = 100;\n        this.displayValue = false;\n        this.fontOptions = '';\n        this.font = 'monospace';\n        this.textAlign = 'center';\n        this.textPosition = 'bottom';\n        this.textMargin = 2;\n        this.fontSize = 20;\n        this.background = '#ffffff';\n        this.margin = 10;\n        this.marginTop = 10;\n        this.marginBottom = 10;\n        this.marginLeft = 10;\n        this.marginRight = 10;\n        this.value = '';\n        this.valid = () => true;\n    }\n    get options() {\n        return {\n            format: this.format,\n            lineColor: this.lineColor,\n            width: this.width,\n            height: this.height,\n            displayValue: this.displayValue,\n            fontOptions: this.fontOptions,\n            font: this.font,\n            textAlign: this.textAlign,\n            textPosition: this.textPosition,\n            textMargin: this.textMargin,\n            fontSize: this.fontSize,\n            background: this.background,\n            margin: this.margin,\n            marginTop: this.marginTop,\n            marginBottom: this.marginBottom,\n            marginLeft: this.marginLeft,\n            marginRight: this.marginRight,\n            valid: this.valid,\n        };\n    }\n    ngOnChanges() {\n        this.createBarcode();\n    }\n    createBarcode() {\n        if (!this.value) {\n            return;\n        }\n        let element;\n        switch (this.elementType) {\n            case 'img':\n                element = this.renderer.createElement('img');\n                break;\n            case 'canvas':\n                element = this.renderer.createElement('canvas');\n                break;\n            case 'svg':\n            default:\n                element = this.renderer.createElement('svg', 'svg');\n        }\n        jsbarcode(element, this.value, this.options);\n        for (const node of this.bcElement.nativeElement.childNodes) {\n            this.renderer.removeChild(this.bcElement.nativeElement, node);\n        }\n        this.renderer.appendChild(this.bcElement.nativeElement, element);\n    }\n}\nNgxBarcode6Component.decorators = [\n    { type: Component, args: [{\n                selector: 'ngx-barcode6',\n                template: `<div #bcElement [class]=\"cssClass\"></div>`\n            },] }\n];\nNgxBarcode6Component.ctorParameters = () => [\n    { type: Renderer2 }\n];\nNgxBarcode6Component.propDecorators = {\n    elementType: [{ type: Input, args: ['bc-element-type',] }],\n    cssClass: [{ type: Input, args: ['bc-class',] }],\n    format: [{ type: Input, args: ['bc-format',] }],\n    lineColor: [{ type: Input, args: ['bc-line-color',] }],\n    width: [{ type: Input, args: ['bc-width',] }],\n    height: [{ type: Input, args: ['bc-height',] }],\n    displayValue: [{ type: Input, args: ['bc-display-value',] }],\n    fontOptions: [{ type: Input, args: ['bc-font-options',] }],\n    font: [{ type: Input, args: ['bc-font',] }],\n    textAlign: [{ type: Input, args: ['bc-text-align',] }],\n    textPosition: [{ type: Input, args: ['bc-text-position',] }],\n    textMargin: [{ type: Input, args: ['bc-text-margin',] }],\n    fontSize: [{ type: Input, args: ['bc-font-size',] }],\n    background: [{ type: Input, args: ['bc-background',] }],\n    margin: [{ type: Input, args: ['bc-margin',] }],\n    marginTop: [{ type: Input, args: ['bc-margin-top',] }],\n    marginBottom: [{ type: Input, args: ['bc-margin-bottom',] }],\n    marginLeft: [{ type: Input, args: ['bc-margin-left',] }],\n    marginRight: [{ type: Input, args: ['bc-margin-right',] }],\n    value: [{ type: Input, args: ['bc-value',] }],\n    bcElement: [{ type: ViewChild, args: ['bcElement', { static: true },] }],\n    valid: [{ type: Input, args: ['bc-valid',] }]\n};\n\nclass NgxBarcode6Module {\n}\nNgxBarcode6Module.decorators = [\n    { type: NgModule, args: [{\n                declarations: [NgxBarcode6Component],\n                imports: [],\n                exports: [NgxBarcode6Component]\n            },] }\n];\n\n/*\n * Public API Surface of ngx-barcode6\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxBarcode6Component, NgxBarcode6Module };\n"]}