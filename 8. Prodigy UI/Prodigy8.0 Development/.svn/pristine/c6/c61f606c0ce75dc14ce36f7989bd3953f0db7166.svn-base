import { __read, __spread, __assign } from 'tslib';
import { Injectable, NgModule } from '@angular/core';
import { fromEvent, timer, Subject, throwError } from 'rxjs';
import { map, filter, tap, debounce, catchError } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ isMac = (navigator.userAgent.indexOf('Mac OS') !== -1);
var /** @type {?} */ codes = {
    'backspace': 8,
    'tab': 9,
    'enter': 13,
    'pause/break': 19,
    'caps lock': 20,
    'esc': 27,
    'space': 32,
    'page up': 33,
    'page down': 34,
    'end': 35,
    'home': 36,
    'left': 37,
    'up': 38,
    'right': 39,
    'down': 40,
    'insert': 45,
    'delete': 46,
    'numpad *': 106,
    'numpad +': 107,
    'numpad -': 109,
    'numpad .': 110,
    'numpad /': 111,
    'num lock': 144,
    'scroll lock': 145,
    'my computer': 182,
    'my calculator': 183,
    ';': 186,
    '=': 187,
    ',': 188,
    '-': 189,
    '.': 190,
    '/': 191,
    '`': 192,
    '[': 219,
    '\\': 220,
    ']': 221,
    "'": 222,
    'windows': 91,
    '⇧': 16,
    '⌥': 18,
    '⌃': 17,
    'pause': 19,
    'break': 19,
    'caps': 20,
    'return': 13,
    'escape': 27,
    'spc': 32,
    'pgup': 33,
    'pgdn': 34,
    'ins': 45,
    'del': 46,
};
var /** @type {?} */ modifiers = {
    'shift': 'shiftKey',
    'ctrl': 'ctrlKey',
    'alt': 'altKey',
    'cmd': isMac ? 'metaKey' : 'ctrlKey',
    'command': isMac ? 'metaKey' : 'ctrlKey',
    'left command': 'metaKey',
    'right command': 'MetaRight',
    '⌘': isMac ? 'metaKey' : 'ctrlKey',
    'option': 'altKey',
    'ctl': 'ctrlKey',
    'control': 'ctrlKey',
};

var _this = this;
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} x
 * @return {?}
 */
function isFunction(x) {
    return typeof x === "function";
}
var /** @type {?} */ any = function (fn, list) {
    var /** @type {?} */ idx = 0;
    while (idx < list.length) {
        if (fn(list[idx])) {
            return true;
        }
        idx += 1;
    }
    return false;
};
var /** @type {?} */ identity = function (x) { return x; };
var /** @type {?} */ isNill = function (x) { return x == null; };
var /** @type {?} */ difference = function (first, second) {
    return first.filter(function (item) { return !second.includes(item); });
};
var /** @type {?} */ allPass = function (preds) { return function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var /** @type {?} */ idx = 0;
    var /** @type {?} */ len = preds.length;
    while (idx < len) {
        if (!preds[idx].apply(_this, args)) {
            return false;
        }
        idx += 1;
    }
    return true;
}; };

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ $$ngOnDestroy = Symbol("OnDestroy");
var KeyboardShortcutsService = /** @class */ (function () {
    function KeyboardShortcutsService() {
        var _this = this;
        /**
         * Parsed shortcuts
         * for each key create a predicate function
         */
        this._shortcuts = [];
        /**
         * Throttle the keypress event.
         */
        this.throttleTime = 0;
        this._pressed = new Subject();
        /**
         * Streams of pressed events, can be used instead or with a command.
         */
        this.pressed$ = this._pressed.asObservable();
        /**
         * Disable all keyboard shortcuts
         */
        this.disabled = false;
        this._ignored = ["INPUT", "TEXTAREA", "SELECT"];
        this.isAllowed = function (shortcut) {
            var /** @type {?} */ target = /** @type {?} */ (shortcut.event.target);
            if (target === shortcut.target) {
                return true;
            }
            if (shortcut.allowIn.length) {
                return !difference(_this._ignored, shortcut.allowIn).includes(target.nodeName);
            }
            return !_this._ignored.includes(target.nodeName);
        };
        this.mapEvent = function (event) {
            return _this._shortcuts
                .map(function (shortcut) {
                return Object.assign({}, shortcut, {
                    predicates: any(identity, shortcut.predicates.map(function (predicates) { return allPass(predicates)(event); })),
                    event: event
                });
            })
                .filter(function (shortcut) { return shortcut.predicates; })
                .reduce(function (acc, shortcut) { return (acc.priority > shortcut.priority ? acc : shortcut); }, /** @type {?} */ ({
                priority: 0
            }));
        };
        this.keydown$ = fromEvent(document, "keydown").pipe(filter(function (_) { return !_this.disabled; }), map(this.mapEvent), filter(function (shortcut) {
            return !shortcut.target || shortcut.event.target === shortcut.target;
        }), filter(function (shortcut) { return isFunction(shortcut.command); }), filter(this.isAllowed), tap(function (shortcut) { return !shortcut.preventDefault || shortcut.event.preventDefault(); }), debounce(function (shortcut) { return timer(shortcut.throttleTime); }), tap(function (shortcut) { return shortcut.command({ event: shortcut.event, key: shortcut.key }); }), tap(function (shortcut) { return _this._pressed.next({ event: shortcut.event, key: shortcut.key }); }), catchError(function (error) { return throwError(error); }));
        /**
         * transforms a shortcut to:
         * a predicate function
         */
        this.getKeys = function (command) {
            return command
                .map(function (key) { return key.trim(); })
                .filter(function (key) { return key !== "+"; })
                .map(function (key) {
                // for modifiers like control key
                // look for event['ctrlKey']
                // otherwise use the keyCode
                if (modifiers.hasOwnProperty(key)) {
                    return function (event) { return !!event[modifiers[key]]; };
                }
                return function (event) {
                    return codes[key]
                        ? event.keyCode === codes[key] || event.key === key
                        : event.keyCode === key.toUpperCase().charCodeAt(0);
                };
            });
        };
        this.subscription = this.keydown$.subscribe();
    }
    Object.defineProperty(KeyboardShortcutsService.prototype, "shortcuts", {
        get: /**
         * @return {?}
         */
        function () {
            return this._shortcuts;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Remove subscription.
     */
    /**
     * Remove subscription.
     * @return {?}
     */
    KeyboardShortcutsService.prototype.ngOnDestroy = /**
     * Remove subscription.
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    /**
     * Enable all keyboard shortcuts
     */
    /**
     * Enable all keyboard shortcuts
     * @return {?}
     */
    KeyboardShortcutsService.prototype.enable = /**
     * Enable all keyboard shortcuts
     * @return {?}
     */
    function () {
        this.disabled = false;
        return this;
    };
    /**
     * Disable all keyboard shortcuts
     */
    /**
     * Disable all keyboard shortcuts
     * @return {?}
     */
    KeyboardShortcutsService.prototype.disable = /**
     * Disable all keyboard shortcuts
     * @return {?}
     */
    function () {
        this.disabled = true;
        return this;
    };
    /**
     * Check if all keyboard shortcuts are disabled.
     */
    /**
     * Check if all keyboard shortcuts are disabled.
     * @return {?}
     */
    KeyboardShortcutsService.prototype.isDisabled = /**
     * Check if all keyboard shortcuts are disabled.
     * @return {?}
     */
    function () {
        return this.disabled;
    };
    /**
     * Add new shortcut/s
     * @param {?} shortcuts
     * @param {?=} instance
     * @return {?}
     */
    KeyboardShortcutsService.prototype.add = /**
     * Add new shortcut/s
     * @param {?} shortcuts
     * @param {?=} instance
     * @return {?}
     */
    function (shortcuts, instance) {
        shortcuts = Array.isArray(shortcuts) ? shortcuts : [shortcuts];
        if (instance) {
            var _a = __read(__spread(shortcuts.map(function (shortcut) { return shortcut.key; })), 1), key = _a[0];
            this.bindOnDestroy(instance, key);
        }
        (_b = this._shortcuts).push.apply(_b, __spread(this.parseCommand(shortcuts)));
        return this;
        var _b;
    };
    /**
     * bind to the component ngOnDestroy to remove related keys
     * when component is destroyed.
     * @param {?} instance - component to remove keys when ngOnDestroy is called.
     * @param {?} keys
     * @return {?}
     */
    KeyboardShortcutsService.prototype.bindOnDestroy = /**
     * bind to the component ngOnDestroy to remove related keys
     * when component is destroyed.
     * @param {?} instance - component to remove keys when ngOnDestroy is called.
     * @param {?} keys
     * @return {?}
     */
    function (instance, keys) {
        if (instance.ngOnDestroy) {
            instance[$$ngOnDestroy] = instance.ngOnDestroy;
        }
        var /** @type {?} */ that = this;
        instance.ngOnDestroy = function () {
            var /** @type {?} */ onDestroy = instance[$$ngOnDestroy];
            if (onDestroy) {
                onDestroy.apply(this);
            }
            that.remove(keys);
        };
        return this;
    };
    /**
     * Remove a command based on key or array of keys.
     * can be used for cleanup.
     * @param {?} key
     * @return {?}
     */
    KeyboardShortcutsService.prototype.remove = /**
     * Remove a command based on key or array of keys.
     * can be used for cleanup.
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var /** @type {?} */ keys = Array.isArray(key) ? key : [key];
        this._shortcuts = this._shortcuts.filter(function (shortcut) {
            return !shortcut.key.find(function (sKey) {
                return keys.filter(function (k) { return k === sKey; }).length > 0;
            });
        });
        return this;
    };
    /**
     * Returns an observable of keyboard shortcut filtered by a specific key.
     * @param {?} key - the key to filter the observable by.
     * @return {?}
     */
    KeyboardShortcutsService.prototype.select = /**
     * Returns an observable of keyboard shortcut filtered by a specific key.
     * @param {?} key - the key to filter the observable by.
     * @return {?}
     */
    function (key) {
        return this.pressed$.pipe(filter(function (_a) {
            var event = _a.event, eventKeys = _a.key;
            return !!eventKeys.find(function (eventKey) { return eventKey === key; });
        }));
    };
    /**
     * Parse each command using getKeys function
     * @param {?} command
     * @return {?}
     */
    KeyboardShortcutsService.prototype.parseCommand = /**
     * Parse each command using getKeys function
     * @param {?} command
     * @return {?}
     */
    function (command) {
        var _this = this;
        var /** @type {?} */ commands = Array.isArray(command) ? command : [command];
        return commands.map(function (command) {
            var /** @type {?} */ keys = Array.isArray(command.key) ? command.key : [command.key];
            var /** @type {?} */ priority = Math.max.apply(Math, __spread(keys.map(function (key) { return key.split(" ").length; })));
            var /** @type {?} */ predicates = keys.map(function (key) { return _this.getKeys(key.split(" ")); });
            return /** @type {?} */ (__assign({}, command, { allowIn: command.allowIn || [], key: keys, throttle: isNill(command.throttleTime) ? _this.throttleTime : command.throttleTime, priority: priority, predicates: predicates }));
        });
    };
    KeyboardShortcutsService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    KeyboardShortcutsService.ctorParameters = function () { return []; };
    return KeyboardShortcutsService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var KeyboardShortcutsModule = /** @class */ (function () {
    function KeyboardShortcutsModule() {
    }
    KeyboardShortcutsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [],
                    exports: []
                },] },
    ];
    return KeyboardShortcutsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { KeyboardShortcutsService, KeyboardShortcutsModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,